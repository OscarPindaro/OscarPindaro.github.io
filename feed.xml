<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="it"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://oscarpindaro.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://oscarpindaro.github.io/" rel="alternate" type="text/html" hreflang="it"/><updated>2024-09-30T21:23:45+00:00</updated><id>https://oscarpindaro.github.io/feed.xml</id><title type="html">blank</title><subtitle>Questo blog è il mio spazio dedicato per approfondire e condividere le mie esperienze nel mondo dell&apos;Intelligenza Artificiale e del Game Design. Nasce con l&apos;obiettivo di consolidare i concetti appresi durante il mio lavoro con l&apos;IA e di narrare la mia avventura nel game design e nello sviluppo con il gruppo Wauhaus. È un punto d&apos;incontro per esplorare nuove idee, discutere le sfide e condividere le migliori pratiche in entrambi i campi. </subtitle><entry><title type="html">Algoritmi Genetici e le 8 regine</title><link href="https://oscarpindaro.github.io/blog/2024/algoritmi-genetici/" rel="alternate" type="text/html" title="Algoritmi Genetici e le 8 regine"/><published>2024-09-30T18:00:00+00:00</published><updated>2024-09-30T18:00:00+00:00</updated><id>https://oscarpindaro.github.io/blog/2024/algoritmi-genetici</id><content type="html" xml:base="https://oscarpindaro.github.io/blog/2024/algoritmi-genetici/"><![CDATA[<h2 id="introduzione">Introduzione</h2> <p>Gli <em>algoritmi genetici</em> sono una classe di algoritmi utilizzati per prototipare rapidamente soluzioni a problemi complessi. Il loro funzionamento si ispira al processo di <em>selezione naturale</em>, in cui gli individui di una popolazione continuano a cambiare e a riprodursi. Solo gli individui più adatti riescono a sopravvivere.</p> <p>Godono di grande popolarità, in quanto il loro funzionamento è molto intuitivo e sono molto semplici da progettare e implementare. Infatti, permettono di prototipare rapidamente soluzioni di qualità discreta a problemi più o meno difficili.</p> <p>Per spiegare il loro funzionamento, userò come esempio il problema delle 8 regine.</p> <h2 id="problema-delle-8-regine">Problema delle 8 regine</h2> <p><a href="https://it.wikipedia.org/wiki/Rompicapo_delle_otto_regine#:~:text=Il%20rompicapo%20(o%20problema)%20delle,i%20movimenti%20standard%20della%20regina.">Il problema delle 8 regine</a> è un puzzle che consiste nel posizionare 8 regine su una scacchiera 8x8 senza che nessuna di queste minacci le altre.<br/> La “difficoltà” del problema consiste nel fatto che le regine minacciano gli altri pezzi che si trovano sulla stessa riga, colonna o diagonali. Tradizionalmente il problema viene risolto utilizzando un algoritmo <em>Depth-First Search (DFS)</em> di backtracking.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/gen_alg_eight_queens/QueenAttacking_ManimCE_v0.18.1-480.webp 480w,/assets/gif/gen_alg_eight_queens/QueenAttacking_ManimCE_v0.18.1-800.webp 800w,/assets/gif/gen_alg_eight_queens/QueenAttacking_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/gen_alg_eight_queens/QueenAttacking_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> La regina è un pezzo molto aggressivo. Può attaccare in orizzontale, verticale e diagonale e muoversi di quanti passi vuole. </div> <p>In DFS, le regine vengono posizionate una alla volta, in maniera tale che l’ultima regina non minacci nessuna delle precedenti, fino a quando non si trova una soluzione o non è possibile posizionare una regina. In questo ultimo caso, l’ultima mossa viene annullata, e si prova in maniera ricorsiva a cambiare le posizioni delle precedenti regine fino alla risoluzione. Questo algoritmo è basato su <em>state space search (ricerca nello spazio di stato)</em>, in cui vengono provate tutte le possibili configurazioni.</p> <p>Il problema delle 8 regine può essere generalizzato a N regine su una scacchiera NxN. Tuttavia, la complessità cresce esponenzialmente, e calcolare una soluzione con DFS diventa computazionalmente intrattabile.</p> <h2 id="componenti-di-un-algoritmo-genetico">Componenti di un algoritmo genetico</h2> <p>Gli algoritmi genetici considerano possibili <em>soluzioni</em> ad un problema come individui in una popolazione. In questo caso, la parola <em>soluzione</em> non assume il significato classico di <em>risoluzione</em>, ovvero quella soluzione che risolve il problema. Ha invece una accezione molto più ampia: è infatti un qualsiasi assegnamento alle variabili del problema. Esistono quindi soluzioni di qualità più o meno alta, ammissibili e inammissibili, e l’obiettivo dell’algoritmo genetico è quello di trovare una soluzione di qualità abbastanza alta (possibilmente la migliore).</p> <p>In un algoritmo genetico, gli individui possono mutare spontaneamente o riprodursi l’un l’altro. Tuttavia, solo gli individui migliori riescono a sopravvivere e a generare “soluzioni” figlie di qualità sempre migliori.</p> <p>I componenti di un algoritmo genetico sono:</p> <ul> <li>La funziona di fitness</li> <li>La rappresentazione delle soluzione</li> <li>La mutazione</li> <li>Il crossover</li> <li>La popolazione</li> </ul> <h3 id="funzione-di-fitness">Funzione di Fitness</h3> <p>La funziona di Fitness è una funzione che assegna un punteggio ad una particolare soluzione. Questa funzione può essere complicata a piacere, e può contenere penalizzazioni per alcuni casi patologici o forti premi per caratteristiche desiderabili.</p> <p>La funzione di fitness condiziona quanto una soluzione riesce a sopravvivere tra una generazione e l’altra. Infatti, gli individui con fitness più alta sono quelli che avranno più probabilità di riprodursi e passare i propri geni positivi alle prossime generazione. In questa maniera soluzioni con fitness bassa hanno una bassa probabilità di generare figli, mentre le migliori soluzioni riescono a generare anche multipli figli con soluzioni altrettanto buone.</p> <h3 id="rappresentazione-della-soluzione">Rappresentazione della soluzione</h3> <p>La <em>rappresentazione</em> è l’astrazione che sintetizza i dettagli essenziali del problema, ed è realizzata attraverso una specifica <em>struttura dati</em>. Questa scelta è cruciale perché influisce direttamente sulle operazioni che possono essere eseguite durante la mutazione e il crossover, insieme all’efficienza con cui tali operazioni vengono eseguite.</p> <p>Ad esempio, nel caso del problema delle 8 regine, la scacchiera potrebbe essere rappresentata come una lista di quadrati, una lista di righe o persino come un grafo di quadrati collegati. Ogni struttura dati offre vantaggi e svantaggi a seconda delle operazioni richieste: alcune possono facilitare certi tipi di mutazioni o controlli di validità, mentre altre potrebbero renderli più complessi o inefficienti.</p> <p>Scegliere la giusta rappresentazione facilita la ricerca di soluzioni di qualità e può accelerare notevolmente il processo evolutivo all’interno dell’algoritmo genetico. Al contrario, una rappresentazione inadeguata può portare alla generazione di soluzioni inammissibili, rallentando l’intero processo evolutivo e facendo perdere individui potenzialmente validi.</p> <h3 id="mutazione">Mutazione</h3> <p>La <em>mutazione</em> è una perturbazione casuale del genoma dell’individuo. Questo è un processo che serve a creare nuove soluzioni da una soluzione pre-esistente, senza cambiarla troppo. L’idea di fondo è che se l’individuo originale ha già una buona fitness,anche individui “adiacenti” avranno una fitness simile. In questa maniera è molto semplice trovare la soluzione ottimale nel caso si abbia già un individuo molto promettente.</p> <p>Nel caso il genoma sia composto da numeri, la soluzione può essere una piccola perturbazione. Nel caso invece il genoma contenga valori categorici (come ad esempio “rosso”, “giallo”, “blu”), basta scegliere casualmente uno degli altri valori.</p> <p>La mutazione è un processo stocastico. Il designer dell’algoritmo genetico deve decidere quanto alta deve essere la probabilità di mutazione. Se troppo bassa, nella popolazione saranno presenti sempre gli stessi individui. Se troppo alta invece la popolazione cambierà troppo frequentemente e le soluzioni ottimali verranno diluite.</p> <h3 id="crossover">Crossover</h3> <p>In biologia il <em>crossover</em> è il processo per cui durante la produzione dei gameti, i cromosomi materni e paterni si intersecano e mischiano. Questo permette ad un individuo di creare gameti molto più diversi da sé stesso, aumentando la variabilità genetica e la probabilità di creare della prole migliore.</p> <p>Negli algoritmi genetici il crossover è molto simile. Infatti le soluzioni di due diversi individui vengono mischiati, e due nuovi individui con caratteristiche di entrambi i genitori vengono creati. Mentre la mutazione causa delle piccole perturbazioni locali attorno ad una soluzione, il crossover permette di generare individui molto diversi da quelli originali e superare quindi minimi locali per trovare soluzioni ottime globalmente. Il crossover è così efficace perché permette a individui molto promettenti di mischiarsi e generare con alta probabilità una soluzione molto migliore, ma permette anche a individui con poca fitness ma con alcune caratteristiche vincenti di unirsi a soluzioni di buona qualità.</p> <h2 id="applicazione-al-problema-delle-8-regine">Applicazione al problema delle 8 Regine</h2> <p>Per il problema delle 8 regine, ho deciso di usare come <em>funzione di fitness</em> il numero di regine minacciate da altre regine. L’obiettivo è quindi quello di minimizzare la fitness. Infatti, l’individuo ottimale avrà fitness pari a 0, in quanto nessuna delle sue regine minaccia le altre.</p> <p>Per quel che riguarda <em>la rappresentazione della soluzione</em>, una scacchiera è rappresentata come una matrice di dimensione NxN i cui elementi possono essere 0 o 1. Se una cella ha valore 0, allora è vuota, altrimenti contiene una regina. Per generare una scacchiera casuale, si potrebbero pescare a caso 8 celle e posizionare le regine. Questo è un esempio di <em>cattiva rappresentazione</em>, in quanto può selezionare con alta frequenza regine sulla stessa riga, colonna o diagonale. Per ovviare a questo problema, si può posizionare una regina su ciascuna riga. In questa maniera si è sicuri che le regine possono essere attaccate solo verticalmente o diagonalmente, riducendo drasticamente il numero di cattive soluzioni.</p> <p>Ora che è stato definita la rappresentazione, è abbastanza ovvio come scegliere mutazione e crossover. Il processo di <em>mutazione</em> seleziona una riga a caso e cambia la posizione della regina, sperando che lo spostamento orizzontale sia abbastanza per migliorare la fitness. Questo mutazione può essere considerato un <em>bit-flip</em>, in quanto la scacchiera rappresenta le posizioni in bit e lo spostamento della regina consiste nel cambiamento di due celle da 0 a 1 e viceversa.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/gen_alg_eight_queens/QueenMutating_ManimCE_v0.18.1-480.webp 480w,/assets/gif/gen_alg_eight_queens/QueenMutating_ManimCE_v0.18.1-800.webp 800w,/assets/gif/gen_alg_eight_queens/QueenMutating_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/gen_alg_eight_queens/QueenMutating_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Una sequenza di mutazioni. La fitness può migliorare, peggiorare o rimanere invariata. Essendo una piccola perturbazione, la fitness non cambia drasticamente, ma rimane nell'intorno del valore originale. </div> <p>Il <em>crossover</em> invece consiste nel scegliere uno a più righe a caso e scambiarle tra due diverse scacchiere. Esistono altri tipi di crossover per matrici in cui, ad esempio, si considerano sub-matrici quadrate o rettangolari. Tuttavia la rappresentazione che è stata scelta permette di utilizzare la prima versione, più semplice, che inoltre continua a garantire la presenza di una sola regina per riga.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/gen_alg_eight_queens/QueenCrossover_ManimCE_v0.18.1-480.webp 480w,/assets/gif/gen_alg_eight_queens/QueenCrossover_ManimCE_v0.18.1-800.webp 800w,/assets/gif/gen_alg_eight_queens/QueenCrossover_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/gen_alg_eight_queens/QueenCrossover_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Un crossover tra due scacchiere. Il numero di righe selezionate è arbitrario, e può essere fino a N-1 (N in questo caso è 8). </div> <h2 id="pro-e-contro-degli-algoritmi-genetici">Pro e Contro degli Algoritmi Genetici</h2> <p>Come tutte le tecniche, gli Algoritmi Genetici non sono il Sacro Gral, e bisogna valutare di volta in volta se sono o meno lo strumento corretto.</p> <h3 id="pro">Pro</h3> <p>Il grande vantaggio degli algoritmi genetici è la loro flessibilità. Il design della soluzione si affida molto all’intuito del progettista, che potrebbe già avere un’idea di quale forma debba avere una buona soluzione. Questo rende anche la fase di design molto leggera, poiché il codice da scrivere non è particolarmente complicato e non richiede l’uso di framework o librerie complesse. È senza dubbio un ottimo modo per incorporare all’interno di un modello la propria intuizione, ed è il motivo per cui è così accessibile.</p> <p>Un altro grande vantaggio è l’elevata velocità di prototipizzazione. In caso di scadenze molto strette, rappresentano un buon modo per produrre una soluzione decente e funzionante, rimandando l’adozione di tecniche più sofisticate ad un momento successivo.</p> <p>Infine, le regole di mutazione e crossover possono essere definite per qualsiasi tipo di dato, senza particolari vincoli. Questo consente di descrivere soluzioni con strutture esotiche, difficilmente o per nulla riproducibili con altri tipi di algoritmi. Offre anche grande flessibilità nella definizione di vincoli e soluzioni non ammissibili, che possono essere penalizzate nella funzione di fitness o scartate a priori quando vengono generate.</p> <h3 id="contro">Contro</h3> <p>Il processo di ottimizzazione negli Algoritmi Genetici dipende fortemente dalla robustezza e dalla qualità della <em>rappresentazione</em> scelta. La <em>funzione di fitness</em> è cruciale, e spesso in un progetto è necessario iterare diverse versioni della funzione prima di trovarne una soddisfacente. Inoltre, non sempre le <em>mutazioni e i crossover</em> selezionati sono efficaci nel superare minimi locali poco soddisfacenti.</p> <h3 id="possibili-alternative">Possibili Alternative</h3> <p>I contro derivano dal fatto che gli Algoritmi Genetici non imparano esplicitamente dagli errori che commettono, ma necessitano di molti tentativi per esplorare efficacemente lo spazio di stato.</p> <p>Esistono altri algoritmi in grado di sfruttare una caratteristica molto utile di alcune funzione di fitness chiamata <em>differenziabilità</em>. Una funzione di fitness differenziabile infatti non solo comunica la qualità di una soluzione, ma è anche in grado di descrivere come la soluzione deve cambiare per migliorare. Gli algoritmi che sfruttano questa proprietà sono <em>algoritmi basati su gradienti</em>, e tendono a essere molto più efficienti in quanto non provano perturbazioni a caso.</p> <p>Un’altra possibile alternativa sono gli algoritmi di <em>ottimizzazione bayesiana</em>. Come gli algoritmi genetici, anche loro esplorano lo spazio di stato casualmente perturbando la soluzione. Tuttavia, la perturbazione è applicata in maniera intelligente, in quanto in maniera sistematica provano a esplorare soluzioni mai esplorate senza però allontanarsi da soluzioni promettenti. Oltre ad aver bisogno della differenziabilità, questi algoritmi ipotizzano anche che soluzioni molto simili hanno fitness simile, senza grandi discontinuità.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="matematica"/><category term="code"/><summary type="html"><![CDATA[Modellare utilizzando algoritmi genetici, applicato al problema delle 8 regine]]></summary></entry><entry><title type="html">Imparando Manim</title><link href="https://oscarpindaro.github.io/blog/2024/esperimenti-manim/" rel="alternate" type="text/html" title="Imparando Manim"/><published>2024-08-25T18:00:00+00:00</published><updated>2024-08-25T18:00:00+00:00</updated><id>https://oscarpindaro.github.io/blog/2024/esperimenti-manim</id><content type="html" xml:base="https://oscarpindaro.github.io/blog/2024/esperimenti-manim/"><![CDATA[<p>Come si può intuire dal titolo, questo post non ha un vero proprio tema, ma è più una raccolta di animazioni che ho fatto per diventare un po’ più disinvolto con <a href="https://www.manim.community/">Manim</a>, la libreria python che utilizzo per creare le gif del blog.</p> <h2 id="cosè-manim">Cos’è Manim</h2> <p>Manim (Mathematical Animation Engin) è una libreria python progettata per creare animazioni matematiche in maniera programmatica.</p> <p>La trovo molto comoda perchè sono un pessimo artista ma mi trovo molto a mio agio a scrivere codice.</p> <p>L’autore di questa libreria è Grant Sanderson, uno dei più famosi divulgatori di matematica. La libreria è nata inizialmente da un suo progetto personale, in cui pubblica video divulgativi suo canale YouTube <a href="https://www.youtube.com/c/3blue1brown">3Blue1Brown</a>.</p> <p>Le animazioni che vedrete sono abbastanza semplici. L’obiettivo è diventare abbastanza disinvolto nell’utilizzo della libreria, e allo stesso tempo trovare una palette che mi permetta di distanziarmi dallo stile di <em>3Blue1Brown</em>.</p> <p>Per adesso ci sono pochi esempi, ma spero di aggiungerne altri in futuro.</p> <h2 id="stella-di-linee">Stella di linee</h2> <p>Questa è una sorta di illusione ottica. Anche se per disegnare questa stella si usano solo linee rette, il risultato sembra una stella con i lati curvi, che ricordano rami di iperboli. Per costruire questa stella bisogna:</p> <ol> <li>Scegliere due assi adiacenti (ad esempio l’asse x positivo e y positivo).</li> <li>Dividere entrambi gli assi in N parti.</li> <li>Partire dal punto più lontano dall’origine su un asse e collegarlo al punto più vicino sull’altro asse.</li> <li>Disegnare la retta successiva avvicinandosi sull’asse su cui si era più lontani e allontanandosi su quello su cui si era più vicini.</li> </ol> <h3 id="palette-chiare">Palette chiare</h3> <p>Le palette chiare sono state quelle più difficili da creare. L’idea originale era quella di avere tante stelle con i colori dell’arcobaleno: tuttavia non tutte si mischiano bene con uno sfondo chiaro.</p> <p>In particolare, l’arcobaleno con i colori pastello è in assoluto il peggiore. Riflettendoci meglio il motivo è abbastanza chiaro: essendo i colori pastellati molto vicini al bianco, tenderanno a mischiarsi meglio con uno sfondo scuro.</p> <p>I miei preferiti sono le animazioni con le palette calde, che ricordano il tramonto.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_golden_sunset_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_golden_sunset_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_golden_sunset_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_golden_sunset_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_onedark_classic_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_onedark_classic_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_onedark_classic_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_onedark_classic_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_pastel_rainbow_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_pastel_rainbow_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_pastel_rainbow_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_pastel_rainbow_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_high_saturation_rainbow_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_high_saturation_rainbow_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_high_saturation_rainbow_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_high_saturation_rainbow_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_onedark_class_rainbow_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_onedark_class_rainbow_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_onedark_class_rainbow_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_onedark_class_rainbow_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_sunset_skyline_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_sunset_skyline_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_sunset_skyline_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_sunset_skyline_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_muted_rainbow_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_muted_rainbow_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_muted_rainbow_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_muted_rainbow_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_neon_rainbow_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_neon_rainbow_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_neon_rainbow_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_neon_rainbow_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/light/LinestarScene_onedark_f0ead6-480.webp 480w,/assets/gif/linestar/light/LinestarScene_onedark_f0ead6-800.webp 800w,/assets/gif/linestar/light/LinestarScene_onedark_f0ead6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/light/LinestarScene_onedark_f0ead6.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h3 id="palette-scure">Palette scure</h3> <p>Queste sono le palette che mi hanno dato in assoluto più soddisfazioni, quindi godetevele.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_golden_sunset_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_golden_sunset_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_golden_sunset_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_golden_sunset_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_onedark_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_onedark_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_onedark_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_onedark_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_pastel_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_pastel_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_pastel_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_pastel_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_high_saturation_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_high_saturation_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_high_saturation_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_high_saturation_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_onedark_classic_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_onedark_classic_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_onedark_classic_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_onedark_classic_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_sunset_skyline_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_sunset_skyline_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_sunset_skyline_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_sunset_skyline_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_muted_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_muted_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_muted_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_muted_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_neon_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_neon_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_neon_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_neon_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_onedark_class_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_onedark_class_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_onedark_class_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_onedark_class_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/linestar/dark/LinestarScene_onedark_vivid_rainbow_282c33-480.webp 480w,/assets/gif/linestar/dark/LinestarScene_onedark_vivid_rainbow_282c33-800.webp 800w,/assets/gif/linestar/dark/LinestarScene_onedark_vivid_rainbow_282c33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/linestar/dark/LinestarScene_onedark_vivid_rainbow_282c33.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="polinomi">Polinomi</h2> <p>Queste animazioni erano per capire come utilizzare il <code class="language-plaintext highlighter-rouge">NumberPlane</code> (Piano Cartesiano) di manim. Purtroppo ci sono ancora alcune sbavature (le funzioni vengono plottate anche fuori dai limiti degli assi). Devo ancora capire se c’è qualche parametro da settare oppure bisogna solo essere un po’ smart quando si disegnano le funzioni.</p> <p>Durante lo sviluppo tendo a fare animazioni molto rapide, ma ora che le riguardo mi rendo conto che bisogna lasciar tempo all’osservatore di capire cosa sta succedendo sullo schermo.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/manim-experiments/StraightLinePoly_ManimCE_v0.18.1-480.webp 480w,/assets/gif/manim-experiments/StraightLinePoly_ManimCE_v0.18.1-800.webp 800w,/assets/gif/manim-experiments/StraightLinePoly_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/manim-experiments/StraightLinePoly_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Plot di due rette. </div> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/manim-experiments/ParabolePoly_ManimCE_v0.18.1-480.webp 480w,/assets/gif/manim-experiments/ParabolePoly_ManimCE_v0.18.1-800.webp 800w,/assets/gif/manim-experiments/ParabolePoly_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/manim-experiments/ParabolePoly_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Plot di due parabole, una convessa e una concava. I colori di questa palette mi piacciono molto. </div> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/manim-experiments/PolynomialTransformation_ManimCE_v0.18.1-480.webp 480w,/assets/gif/manim-experiments/PolynomialTransformation_ManimCE_v0.18.1-800.webp 800w,/assets/gif/manim-experiments/PolynomialTransformation_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/manim-experiments/PolynomialTransformation_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Trasformazione da un polinomio di quarto grado a uno di terzo. La palette originale di 3Blue1Brown mantiene sempre il suo fascino. </div> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/manim-experiments/RandomCubics_ManimCE_v0.18.1-480.webp 480w,/assets/gif/manim-experiments/RandomCubics_ManimCE_v0.18.1-800.webp 800w,/assets/gif/manim-experiments/RandomCubics_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/manim-experiments/RandomCubics_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Una serie di cubiche casuali. Ho usato una palette dai colori caldi del tramonto. Provo sensazioni miste, probabilmente il nero dovrebbe essere meno saturo. Inoltre i rossi usati per le funzioni sono troppo vicini nello spettro. </div> <h2 id="regressione-lineare">Regressione Lineare</h2> <p>Questo è un esempio di regressione lineare, utilizzando però solo feature polinomiali. I dati sono campionati dalla distribuzione rossa, un polinomio di quarto grado. Successivamente, un polinomio di terzo grado è fittato usando Stochastic Gradient Descent.</p> <p>La regressione lineare è un <em>problema a forma chiusa</em>, ovvero esiste una soluzione che può essere calcolata analiticamente senza alcuna approssimazione dell’errore. Tuttavia, la Discesa del Gradiente ha un nome molto più divertente ed è anche più bello da animare.</p> <p>I colori lasciano un po’ a desiderare, ma avevo già perso troppo tempo a giocherellare con i parametri della regressione.</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gif/manim-experiments/PolynomialFitting_ManimCE_v0.18.1-480.webp 480w,/assets/gif/manim-experiments/PolynomialFitting_ManimCE_v0.18.1-800.webp 800w,/assets/gif/manim-experiments/PolynomialFitting_ManimCE_v0.18.1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gif/manim-experiments/PolynomialFitting_ManimCE_v0.18.1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption" style="font-size: 18px; font-style: italic;"> Dei punti vengono campionati dalla distribuzione rossa. In bianco, i diversi polinomi di terzo grado che vengono creati durante la Discesa del gradiente. Più passa il tempo, meglio approssimano la funzione originale </div> <ul id="gradient-descent" class="tab" data-tab="0536fe3c-6387-43a9-81e7-525a141d4d14" data-name="gradient-descent"> <li class="active" id="gradient-descent-latex"> <a href="#">latex </a> </li> <li id="gradient-descent-code"> <a href="#">code </a> </li> </ul> <ul class="tab-content" id="0536fe3c-6387-43a9-81e7-525a141d4d14" data-name="gradient-descent"> <li class="active"> \[\theta_{t+1} = \theta_t + \alpha \nabla_{\theta} f(\theta_t)\] <p>Dove:</p> <ul> <li>\(\theta\) rappresenta i parametri della regressione (ovvero i coefficienti del polinomio),</li> <li>\(\alpha\) è il tasso di apprendimento (cioè quanto del gradiente considerare durante l’aggiornamento dei parametri),</li> <li>\(\nabla_{\theta}f(\theta_t)\) è il gradiente dell’errore rispetto ai parametri della regressione. Se il regressore è un polinomio di grado 3, allora il gradiente sarà un vettore di 4 elementi, uno per ciascun coefficiente del polinomio. Il valore del gradiente per un parametro corrisponde al valore della potenza associata a quel parametro.</li> </ul> </li> <li> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">gradient_ascent_fit</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">]:</span>
      <span class="kn">import</span> <span class="n">math</span>

      <span class="n">errors</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="n">fitted_polys</span> <span class="o">=</span> <span class="p">[]</span>

      <span class="c1"># if the gradients become too big, the loop may become numerically unstable
</span>      <span class="n">clip_val</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">clip_val0</span>

      <span class="c1"># a preliminary solution can be a random polynomial
</span>      <span class="n">estimator</span> <span class="o">=</span> <span class="n">Polynomial</span><span class="p">.</span><span class="nf">random</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_degree</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
      <span class="c1"># estimator = Polynomial((1,)*5)
</span>
      <span class="c1"># first iteration
</span>      <span class="n">fitted_polys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">estimator</span><span class="p">)</span>
      <span class="n">errors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="nf">compute_error</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">X</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">y_true</span><span class="p">))</span>

      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_steps</span><span class="p">):</span>
          <span class="c1"># the learning weight gets smaller the more time passes. It helps convergence
</span>          <span class="n">lr</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">lr0</span> <span class="o">/</span> <span class="n">math</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
          <span class="c1"># lr = self.lr0
</span>          <span class="n">estimator</span> <span class="o">=</span> <span class="n">estimator</span><span class="p">.</span><span class="nf">gradient_ascent_step</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y_true</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">clip_val</span><span class="p">)</span>
          <span class="n">fitted_polys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">estimator</span><span class="p">)</span>
          <span class="n">errors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="nf">compute_error</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">X</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">y_true</span><span class="p">))</span>

      <span class="k">return</span> <span class="n">fitted_polys</span><span class="p">[::</span><span class="n">self</span><span class="p">.</span><span class="n">save_every</span><span class="p">]</span><span class="o">+</span><span class="p">[</span><span class="n">fitted_polys</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span> <span class="n">errors</span><span class="p">[::</span><span class="n">self</span><span class="p">.</span><span class="n">save_every</span><span class="p">]</span><span class="o">+</span><span class="p">[</span><span class="n">errors</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
</code></pre></div></div> <ul> <li>Inizializzazione: Si crea un polinomio casuale e si calcola il suo errore iniziale.</li> <li>Iterazioni: Per un certo numero di passi, il polinomio viene aggiornato usando gradient ascent (spostandosi nella direzione del gradiente per ridurre l’errore). Il learning rate diminuisce nel tempo per favorire la convergenza.</li> <li>Output: Restituisce i polinomi e gli errori ad intervalli regolari e alla fine.</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="code"/><summary type="html"><![CDATA[Una raccolta di animazioni per imparare ad usare meglio manim]]></summary></entry></feed>